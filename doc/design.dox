/**

@defgroup design Igatools general design
@brief Rationale behind the the igatools classes design
@{

Many of the classes in the igatools library can be grouped into modules. 
These modules form around the building blocks of any isogeometric-based program. 

These groups are all covered in the tutorial programs, 
with a first overview of how they fit together given in tutorial 6. 
The following is a guide to this classification of groups, as well as links to 
the documentation pertaining to each of them:

- the @subpage eval_pts_scheme are classes describing the location of points in the space and they
  are used mainly as input arguments of basis function evaluations;

- the @subpage infrastructure is a macro-module containing all the classes that are used to define
  the function spaces and to perform the evaluation of the basis function. 
  For code maintainability reasons, this module is split in 3 sub-modules. 

   - the @subpage containers i.e. the classes that represents <em>global data</em>. 
The classes in this group have an underlying grid-like structure (intended as union of elements) 
and usually have a big memory footprint. They are not intended to be used to perform computations.

   - the @subpage elements classes describe the properties of a finite element space as defined as
  mapping of the unit cell. 
  This includes, for example, how many and which basis function have support in the interior of element. 
  In addition to this, element classes of course have to provide values and gradients of 
  individual shape functions at points on the unit cell;

   - the @subpage handlers i.e. the classes that performs heavy computations and fills the local <em>cache</em> of the elements


   For each class in a given module, there could be an associated class in each of the other two modules,
as described by the following table:
<center>
Element Containers   | Elements              | Element's cache fillers/handlers
-------------------- | ----------------------|---------------------
Grid                 | GridElement           | GridHandler
ReferenceSpace       | ReferenceElement      | ReferenceElementHandler
BSpline         | BSplineElement        | BSplineElementHandler 
NURBS           | NURBSElement          | NURBSElementHandler
Mapping              | MappingElement        | not defined
PushForward          | PushForwardElement    | not defined
PhysicalSpace        | PhysicalSpaceElement  | PhysSpaceElementHandler
</center>
   For the Mapping and the PushForward, the element filler is the container itself.
   

- the @subpage iterators  i.e. the classes that are used to iterate over the elements of a given
container. 

- @subpage in_out
- @subpage linear_algebra
- @subpage spaces_manager


The split in the above concepts is made to have (and maintain) a clear distinction between
<em>data</em> and <em>methods using the data</em>, with the goal of maximum encapsulation.
   
*/

/** @}*/ //end of group design


/**
@defgroup infrastructure Element/Container/Filler Infrastructure
@ingroup design
@{

The library is designed in such a way that values at points within an element can be obtained in two
ways:
- the first approach is simpler to use but can be somewhat less efficient: element accessors have a set of
  member function that permits to <em>compute</em> and <em>retrieve</em> the quantity of interest 
  passing the quadrature points as input argument. 

- @subpage elem_cache

*/

/** @}*/ //end of group infrastructure



/**
@defgroup elements Elements 
@ingroup infrastructure
@{
The classes in this module are objects used to represent an element on an associated container.
Their use and specifications can be summarized as follow:
- they access information on @subpage containers. For each class in the @subpage containers group 
there is an associated accessor, as shown in the following table: 
<center>
Elements             | Element Containers    
-------------------- | ----------------------
GridElement          | Grid  
ReferenceElement     | ReferenceSpace      
BSplineElement       | BSpline         
NURBSElement         | NURBS          
MappingElement       | Mapping        
PushForwardElement   | PushForward    
PhysicalSpaceElement | PhysicalSpace
</center>
- they have an identifier in order to specify which element in the associated container they are representing;
- they have @subpage iterators as friend classes (because the an iterator must be able to modify the 
element);
- they contains a <em>local cache</em> that is used to keep precomputed values at Quadrature.
*/

/** @}*/ //end of group elements

/**
@defgroup handlers Element's cache fillers/handlers 
@ingroup infrastructure
@{
*/

/** @}*/ //end of group handlers



/**
@defgroup eval_pts_scheme Evaluation points 
@ingroup design
@{
@brief Description about the different evaluation points arrangement. 

One of the typical information that igatools can provide, is the values (or derivatives)
 of functions (e.g. the basis of a vector space, a field, generic analytic, etc.) 
 at some points in their domain.

In order to attain good performance, it is better to perform computation 
on groups of points. Moreover, sometimes the evaluation points are built in a way that
give them special properties that can be exploited in the computation
(a tipical case is the tensor-product structure of the points of
many quadrature schemes).

Each group of points should be represented as an instance of one of the following classes:
<center>
class name        | Description
----------------- | ----------------------------------
Quadrature        | Evaluation points on a single element freely definable by the user (without tensor-product structure)
QGauss            | Evaluation points on a single element generated with Gauss-Legendre formula (with tensor product structure)
QGaussLobatto     | Evaluation points on a single element generated with Gauss-Lobatto formula (with tensor product structure)
QUniform          | Evaluation points on a single element generated uniformly (with tensor product structure)
QTrapez           | Evaluation points on a single element generated with trapezodoila rule (with tensor product structure)
</center>

<ul>
<li>
Due to the fact that most of the time we need to perform function evaluations 
for quadrature purposes, 
to each point is associated a <em>weight</em>.

If the points are defined by the user through the base class Quadrature, 
the associated weights are set by default to 1.0.
</li>
<li>
Each one of the previous classes contains information about the 
<em>bounding box</em> encosing the points.
This information is used if the points needs to be dilated and/or translated.

By default the bounding box is set to be the unit <tt>dim</tt>-dimensional hypercube
\f$ \bigl[ 0,1 \bigr]^{\text{dim}} \f$.

@note In case of dilation, the weights are modified such that they are still valid for 
the quadrature on the new bounding box.
</li>
</ul>

@note <b>For the developers</b>: any function that requires the points to be passed as input 
argument, should be declared (and should work) using the input type Quadrature, 
that is the base class for the other different type of evaluation points containers.

*/

/** @}*/ //end of group eval_pts_scheme


/**
@defgroup containers Elements Containers
@ingroup infrastructure
@{
*/

/** @}*/ //end of group containers


/**
@defgroup iterators Iterators
@ingroup design
@brief Description about how traverse the elements in a container.

@{
An iterator is an object that allows you to visit all (or a subset of) the elements contained in another object, 
typically a container, without worrying about the details of a specific implementation.

An iterator can be considered a specialized type of pointer that provides a point of sequential 
access to elements of an object that contains a finite number of simpler objects, called <em>aggregate</em>.


In the igatools library, the mechanism in which an iterator is pointing to a specific element in a container 
(i.e. one of the classes described in the \ref containers module) is by the use of 
an <b>accessor</b>. 

An accessor is one of the class defined in the \ref elements module and its type is used as template 
argument of the iterator. In other words, we parametrize the iterator with the element pointed by 
itself in the appropriate elements containers. In this way we can use the same iterator with different
container/element pairs.

The type of element pointed by the iterator (and the associated container type) can be retrieved
from the following iterator's member types:

Member type            | Definition                          | notes
-----------------------|-------------------------------------|----------
<tt>AccessorType</tt>  |The template parameter               | One of the class in the module \ref elements
<tt>ContainerType</tt> |<tt>AccessorType::ContainerType</tt> | The container type upon which the iterator is defined 

The iterator offers two basic operations:
   - Access to the element of the aggregate currently focused;
   - Updating the pointer so that it points to the next element in the sequence.

These simple operations provide access to the elements of an aggregate in a uniform manner and 
independently of the internal structure of the aggregate, 
which can be much more complex sequences implemented by linear arrays and lists.


Each class in the \ref containers module can be traversed by an iterator, and they provides the 
following functions returning an iterator pointing to a specific element in the container:
- <b>begin()</b> returns the iterator pointing to the first valid element in the container. 
If this function is invoked using an <em>element property</em> as input argument, 
it returns an iterator pointing to the first element in the container with that property.
- <b>last()</b> returns the iterator pointing to the last valid element in the container. 
If this function is invoked using an <em>element property</em> as input argument, 
it returns an iterator pointing to the first element in the container with that property.
- <b>end()</b> returns an iterator representing the situation in which the pointed element is not any longer valid 
because is outside the container.


Currently, in igatools there is only one kind of iterator: the CartesianGridIterator 
(and its constant counterpart CartesianGridConstIterator), that permits to
iterate sequentially over elements built upon a container with an underlying tensor-product structure,
in a range in the direction that goes from its beginning towards its end.
Its main features are:
- it takes an accessor's type as template parameter;
- it can be defined with an element property (see the relative documentation in CartesianGrid);
- it can be incremented (using the prefix operator <tt>++</tt>) in order to point to the next element 
in the container with the same property (if a property is used when the CartesianGridIterator is built);
- when dereferenced (using the dereferencing operator <tt>*</tt> or <tt>-></tt>), 
it returns an accessor object or a pointer to an accessor.

It not fulfills all the requirements to be an 
<a href="http://www.cplusplus.com/reference/iterator/ForwardIterator/">STL forward iterator</a>
because:
- it is not default constructible;
- the postfix operator <tt>++</tt> is not defined. 
*/

/** @}*/ //end of group iterators



/**
@defgroup spaces_manager Spaces Manager
@ingroup design
@{
*/

/** @}*/ //end of spaces_manager

/**
@defgroup linear_algebra Linear Algebra
@ingroup design
@{
*/

/** @}*/ //end of group linear_algebra


/**
@defgroup serializable Serializable classes
@ingroup design
@{
@brief Classes that implements and use the 
<a href="http://www.boost.org/doc/libs/release/libs/serialization/">boost::serialization</a> library.
@see <a href="http://www.boost.org/doc/libs/release/libs/serialization/">boost::serialization</a>
*/

/** @}*/ //end of group serializable


/**
@defgroup cache Cache
@ingroup design
@{
*/

/** @}*/ //end of group cache


