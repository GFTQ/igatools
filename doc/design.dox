/**

@defgroup design Igatools general design
@brief Rationale behind the the igatools classes design
@{   

In order to explain the design of the igatools library, it is useful to think the igatools' classes
grouped into three concepts:
- the @subpage containers i.e. the classes that represents <em>global data</em>. 
The classes in this group have an underlying grid-like structure (intended as union of elements) 
and usually have a big memory footprint. They are not intended to be used to perform computations.
- the @subpage iterators_accessors  i.e. the classes that are used to iterate over the elements of the
<em>Containers</em> from which they use some portion of their data. 
Those classes are the one that performs the heavy computations.
- the @subpage infrastructure i.e. the classes that are used in order to let the <em>Containers</em> and
the <em>Iterators/Accessors</em> to work properly.

The split in the above concepts is made to have (and maintain) a clear distinction between
<em>data</em> and <em>methods using the data</em>, with the goal of maximum encapsulation.

@remark For each class in the <em>Containers</em> group is associated one (or more) class in the
<em>Iterators/Accessors</em> iterator group. The association between a <em>Container</em> and 
its relative <em>Iterator/Accessor</em> is shown in the next table
<center>
Container     | Iterator/Accessor
------------- | -----------------
CartesianGrid | CartesianGridElementAccessor 
BSplineSpace  | BSplineElementAccessor 
NURBSSpace    | NURBSElementAccessor
Mapping       | MappingElementAccessor
PushForward   | PushForwardElementAccessor
PhysicalSpace | PhysicalSpaceElementAccessor
</center>
   
*/

/** @}*/ //end of group accessors_iterators


/**
@defgroup containers Containers
@ingroup design
@{
*/

/** @}*/ //end of group containers

/**
@defgroup iterators_accessors Iterators/Accessors
@ingroup design
@{
Generally speaking, an iterator is an object that enables to traverse a container, while an accessor
is an object that access information on a container.

An <b>iterator</b> is an object that allows you to visit all (or a subset of) the elements contained in another object, 
typically a <b>container</b>, without worrying about the details of a specific implementation.
An <b>iterator</b> can be considered a specialized type of pointer that provides a point of sequential 
access to elements of an object that contains a finite number of simpler objects, called <em>aggregate</em>.

In igatools, the mechanism in which an iterator is pointing to a specific element in a <b>container</b> is
by the use of an <b>accessor</b>.
An <b>accessor</b> is a class associated to a container and representing a single element within the container,
and contains the methods that are proper to the element.


In order to clarify we can summarize as follows:
  - the <b>container</b> is used to represent a set of elements;
  - the <b>iterator</b> is used to handle the way in which a container is traversed;
  - the <b>accessor</b> is used to represent the element (in a container) pointed by the iterator. 
*/


/** @}*/ //end of group iterators_accessors

/**
@defgroup iterators Iterators
@ingroup iterators_accessors
@{
An iterator is an object that allows you to visit all (or a subset of) the elements contained in another object, 
typically a container, without worrying about the details of a specific implementation.

An iterator can be considered a specialized type of pointer that provides a point of sequential 
access to elements of an object that contains a finite number of simpler objects, called <em>aggregate</em>.

The iterator offers two basic operations:
   - Access to the element of the aggregate currently focused;
   - Updating the pointer so that it points to the next element in the sequence.
These simple operations provide access to the elements of an aggregate in a uniform and independent 
of the internal structure of the aggregate, which can be much more complex sequences implemented by 
linear arrays and lists.


Currently, in igatools there is only one kind of iterator: the CartesianGridIterator, that permits to
iterate sequentially over a container of elements with an underlying tensor-product structure,
in a range in the direction that goes from its beginning towards its end.
Its main features are:
- it takes an accessor's type as template parameter;
- can be incremented (using the prefix operator <tt>++</tt>) in order to point to the next element 
in the container;
- when dereferenced (using the dereferencing operator <tt>*</tt> or <tt>-></tt>), 
it returns an accessor object or a pointer to an accessor.

It not fulfills all the requirements to be an 
<a href="http://www.cplusplus.com/reference/iterator/ForwardIterator/">STL forward iterator</a>
because:
- it is not default constructible;
- the postfix operator <tt>++</tt> is not defined. 
*/

/** @}*/ //end of group iterators

/**
@defgroup accessors Accessors
@ingroup iterators_accessors
@{

The accessors are objects used to represent an element on an associated container.
Their use and specifications can be summarized as follow:
- they are template argument for @subpage iterators, so it is safe to think of them as part of the iterators;
- they access information on @subpage containers. For each class in the @subpage containers group 
there is an associated accessor, as shown in the following table: 
<center>
Container     | Iterator/Accessor
------------- | -----------------
CartesianGrid | CartesianGridElement 
BSplineSpace  | BSplineElement 
NURBSSpace    | NURBSElement
Mapping       | MappingElementAccessor
PushForward   | PushForwardElement
PhysicalSpace | PhysicalSpaceElement
</center>
- they have an identifier in order to specify which element in the associated container they are representing;
- they have @subpage iterators as friend classes (because the an iterator must be able to modify the 
element identifier withih the accessor).


@todo complete the documentation

*/

/** @}*/ //end of group accessors

/**
@defgroup infrastructure Infrastructure
@ingroup design
@{
*/

/** @}*/ //end of group infrastructure
