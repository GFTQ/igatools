/**
   
   @defgroup multi_array_containers Containers for multi-dimensional arrays.
   
   Igatools provides different containers for special types of multi-dimensional
   arrays. They can be classified according to two different categories:
   - <b>data structure</b>:
     - <b><em>tensor-product</em></b>.
       The containers with this data structures are intended to be used to represent multi-dimensional
       quantities that can be fully described by one dimensional quantities and ``concepts'' like
       the tensor product or the cartesian product.
       For example, if we have the set of points in \f$ \mathbb{R}^d\f$
       \f[
         \mathbf{X} = \{ \mathbf{x}_{i_1,\dots,i_d} = (x_{i_1},\dots,x_{i_d}) \in \mathbb{R}^d, 
         \quad i_k=1,\dots,n_k , \quad k=1,\dots,d \}
       \f]
       this can be viewed as
       \f[
         \mathbf{X} = \mathbf{X}_1 \times \dots \times \mathbf{X}_d 
       \f]
       where \f$\mathbf{X}_k = \{ x_{i_k} \in \mathbb{R}, \quad i_k=1,\dots,n_k \}\f$.
       This means that the information contained by \f$\mathbf{X}\f$ 
       (i.e. the \f$ n = \prod_{k=1}^d n_k\f$ points in \f$\mathbf{R}^d\f$) can be retrieved
       from the \f$d\f$ sets of 1-dimensional coordinates \f$\mathbf{X}_k\f$. 
       Therefore the number of values that must be stored are 
         \f$\sum_{k=1}^d n_k\f$ instead of \f$d \prod_{k=1}^d n_k\f$, resulting in a smaller memory
       footprint.
        
       The same applies if we have a set 
       \f[
         \mathbf{Y} = \{ y_{i_1,\dots,i_d} = \prod_{k=1}^d y_{i_k} \in \mathbb{R}, 
         \quad i_k=1,\dots,n_k , \quad k=1,\dots,d \}
       \f]
       this can be viewed as
       \f[
         \mathbf{Y} = \mathbf{Y}_1 \otimes \dots \otimes \mathbf{Y}_d 
       \f]
       where \f$\mathbf{Y}_k = \{ y_{i_k} \in \mathbb{R}, \quad i_k=1,\dots,n_k \}\f$
       and the \f$\otimes\f$ symbol means the tensor product operator, i.e. 
       \f$\mathbf{Y}_{r} \otimes \mathbf{Y}_{s} = 
       \{ y_{i_r,i_s} = y_{i_r} y_{i_s}, \quad \forall y_{i_r}\in \mathbf{Y}_{r} ,\; \forall y_{i_s}\in \mathbf{Y}_{s} \}\f$.
         
       The container for representing the cartesian product structure is CartesianProductArray, 
       while the one for representing the tensor product structure is TensorProductArray.
       
       In order to access the internal 1-dimensional data, we provide the functions 
       CartesianProductArray::get_data_direction() and  CartesianProductArray::copy_data_direction()
     - <b><em>not tensor-product</em></b>.
       This kind of containers represent collections of objects that can be referred with 
       \f$d\f$-dimensional multi-indices, e.g.
       \f[
         \mathbf{W} = \{ \mathbf{w}_{i_1,\dots,i_d} \in \mathcal{W}, 
         \quad i_k=1,\dots,n_k , \quad k=1,\dots,d \} \;.
       \f]
       Internally the memory is organized as 1-dimensional vector of
       objects, so we provide the entries access operators () (const and non-const version) accepting both 
       multi-indices (trhough its representation via the class TensorIndex) and flat indices.
       The containers in this category are: DynamicMultiArray and StaticMultiArray, both derived by
       MultiArray.
   - <b>type of memory allocation</b>: 
     - <b><em>static</em></b>: the size of the container is known at compilation time and is fixed. 
       The container cannot be resized. 
       The containers in this category are: std::array and StaticMultiArray;
     - <b><em>dynamic</em></b>: the size of the container is passed as argument of the constructors. 
       The container can be resized with the function resize().
       The containers in this category are: DynamicMultiArray, CartesianProductArray and TensorProductArray;
     
   
   @remark All the multi-dimensional containers share the flat to tensor (and viceversa) index convention.
*/

