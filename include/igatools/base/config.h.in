//-+--------------------------------------------------------------------
// Igatools a general purpose Isogeometric analysis library.
// Copyright (C) 2012-2015  by the igatools authors (see authors.txt).
//
// This file is part of the igatools library.
//
// The igatools library is free software: you can use it, redistribute
// it and/or modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation, either
// version 3 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//-+--------------------------------------------------------------------

#ifndef __IGA_CONFIG_H_
#define __IGA_CONFIG_H_

#cmakedefine REAL_IS_LONG_DOUBLE
#cmakedefine USE_TRILINOS
#cmakedefine USE_NURBS
#cmakedefine MPATCH
#cmakedefine HIERARCHICAL
#cmakedefine SERIALIZATION
#cmakedefine PARAVIEW_PLUGIN
#cmakedefine MESH_REFINEMENT
#cmakedefine USE_CEREAL
#cmakedefine XML_IO
#cmakedefine USE_DEPRECATED

#define MAX_NUM_DERIVATIVES @max_der_order@ + 1
#define num_sub_elem @num_sub_elem@

#define BOOST_DISABLE_ASSERT

#define IGA_NAMESPACE_OPEN namespace iga {
#define IGA_NAMESPACE_CLOSE }

//--------------------------------------------------------------------
#define BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS
#define BOOST_MPL_LIMIT_VECTOR_SIZE 30
#define FUSION_MAX_VECTOR_SIZE 30
//--------------------------------------------------------------------

#include <igatools/base/types.h>
#include <igatools/base/numbers.h>

//--------------------------------------------------------------------
#ifdef SERIALIZATION

#ifdef USE_CEREAL

#include <cereal/cereal.hpp>
#include <cereal/access.hpp>
#include <cereal/types/base_class.hpp>
#include <cereal/types/vector.hpp>
#include <cereal/types/array.hpp>
#include <cereal/types/set.hpp>
#include <cereal/types/map.hpp>
#include <cereal/types/tuple.hpp>
#include <cereal/types/utility.hpp>
#include <cereal/types/memory.hpp>
#include <cereal/types/polymorphic.hpp>

// #include <cereal/archives/xml.hpp>
// using OArchiveCereal = cereal::XMLOutputArchive;
// using IArchiveCereal = cereal::XMLInputArchive;

#include <cereal/archives/binary.hpp>
using OArchiveCereal = cereal::BinaryOutputArchive;
using IArchiveCereal = cereal::BinaryInputArchive;

using namespace cereal;

using OArchive = OArchiveCereal;
using IArchive = IArchiveCereal;

using serialization_access = cereal::access;

#endif // USE_CEREAL

#endif // SERIALIZATION
//--------------------------------------------------------------------

#include <cmath>

#endif /* __IGA_CONFIG_H_ */
