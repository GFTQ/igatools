/**

\page example_04 Example 4: a trivial Poisson problem

\section Introduction

We should now have most of the tools for handling the simplest problem one can have:
we are going to solve the \f$d\f$-dimensional Poisson problem on the reference domain with homogeneus Dirichlet boundary
condition and constant source term \f$f\in\mathbb{R}\f$, or in mathematical language
\f{equation}{
  \left\{
    \begin{aligned}
      -\Delta u &= f \textrm{   in }{[0,1]^d}\\
      u &= 0 \textrm{   on }\partial{[0,1]^d}\\
    \end{aligned}
  \right.
\f}
In variational form, the problem is finding \f$u\in H^1_0({[0,1]^d})\f$ such that
\f{equation}{
  a(u,v) = \int_{[0,1]^d} \nabla u\cdot\nabla v\,dx=\int_{[0,1]^d} fv\,dx = F(v)
  \qquad\forall v\in H^1_0({[0,1]^d})
\f}
The discretized problem leads to \f$\mathbf{A}\mathbf{u}=\mathbf{f}\f$, where,
given a quadrature rule \f$\{(p_i,w_i)\}_{i=1}^{n_{quad}}\f$ and a spline basis 
\f$\{\phi_i\}_{i=1}^{n_{dof}}\f$, we have
 - \f$\mathbf{A}\in\mathbb{R}^{n_{dof}\times n_{dof}}\f$ is the stiffness matrix 
   with entries \f$ \mathbf{A}_{ij} = \int_{[0,1]^d} \nabla\phi_i \cdot \nabla \phi_j \,dx
   \approx \sum_{k=1}^{n_{quad}} 
   \nabla \phi_i(p_k) \cdot \nabla \phi_j(p_k) w_k \f$;
 - \f$\mathbf{f}\in\mathbb{R}^{n_{dof}}\f$ is the right-hand side with entries
   \f$ \mathbf{f}_{i} = \int_{[0,1]^d} f\phi_i\,dx \approx \sum_{k=1}^{n_{quad}} 
    \phi_j(p_k) f(p_k) w_k \f$;
 - \f$\mathbf{u}\in\mathbb{R}^{n_{dof}}\f$ is the discrete solution in terms of the
   coefficients for the basis.

The stiffness matrix assemble is based (surprisingly) on an element loop: we will
compute local element contribution in local block matrices (or vectors for the right-hand
side). The actual assemble and solving of the system is delegated to the
[Trilinos](https://trilinos.org/) library.
   
\section code04 Description of the program

We traditionally start with the new headers for boundary degrees of freedom management,
matrix and vector storage and linear solvers:
\snippet example_04.cpp include

Since we have to deal with the external library Trilinos, another namespace is
useful:
\snippet example_04.cpp using

We create the class PoissonProblem for everything. Most of the variables and the constructor
are self-explanatory (if one has read the previous Examples). The new concepts
are about the objects related to the linear system, whose declaration is the
following:
\snippet example_04.cpp system
The Matrix and Vector objects are simple derived classes from the Epetra objects
Epetra_CrsMatrix and Epetra_Vector respectively. Here is their construction:
\snippet example_04.cpp sys_create
There is a flag system for the degrees of freedom (and other entities such as grid
elements) in igatools: each of them can be associated or not to a particular 
user-defined property. This permits to define loops or compute quantities just on 
subsets of the DOFs and not the full set. There is only the DofProperties::active
default property. We finally notice that we are using the default serial MPI
communicator (i.e. containing only one process) implemented in Trilinos.

We can now see how to assemble the linear system in the body of the method 
<tt>assemble()</tt>. As it has been already explained in \ref example_03, we skip
the set up for the cache handler and jump directly to the initialization of the
element loop:
\snippet example_04.cpp loop_init
After having retrieved the number of quadrature points, the number of non-zero
basis functions per element and assigned the constant value of the source term, 
we initialize the loop and fill the cache. We then define a 
DenseMatrix for the element matrices and a DenseVector for the element vectors.
Lastly, we retrieve the ValueTable of each requested quantity.

\note
The DenseMatrix and DenseVector classes are derived from the matrix and vector types in the 
[Boost uBlas library](http://www.boost.org/doc/libs/1_59_0/libs/numeric/ublas/doc/index.html).
Therefore they can be used as a boost::numeric::ublas::matrix<Real> or
boost::numeric::ublas::vector<Real>.

The followings are the nested loops for the computation of the DenseMatrix
<tt>loc_mat</tt>:
\snippet example_04.cpp stiffness
In order to compute the entries of <tt>loc_mat</tt>, we need to access to the data stored in <tt>grads</tt>. 
We get into <tt>grd_i</tt> a pointer to a variable of type ValueContainer. This (aliased) class
stores a specific quantity (such as the value or the gradient) of all non-zero 
basis functions in the element on all quadrature point. It can be thought as a
double array of tensors. 
The user can get the pointer
of basis functions quantities in a prescribed point or the quantities on all points
of a prescribed function. In this case we need the values of the \f$i\f$-th and
\f$j\f$-th basis functions in each point.
See the documentation of the ValueTable class for more
details. Once we have a view for the basis function \f$i\f$ and one for \f$j\f$,
the innermost loop traverses the quadrature points and sums the local contribution.

There is not much to say about the computation of the local vectors, apart from
the fact that due to implementation constraints for tensor data structures, the direct
access of the values inside <tt>vals</tt> requires an extra <tt>[0]</tt>:
\snippet example_04.cpp rhs
Here is the assemble:
\snippet example_04.cpp add_block
As already stated, the actual assemble is delegated to Trilinos, hence we just
need to extract the local-to-global connectivity and pass the local matrix and
local vector to the Trilinos routines. As final requirement, we complete the
assemble via a mandatory call of <tt>FillComplete</tt>.

We are almost done with the assemble. The last step is applying the homogeneous
Dirichlet boudnary condition. We will implement this with brutal force: the
boundary DOFs will be manually set to 0 and th system matrix properly updated.
Here is the code:
\snippet example_04.cpp boundary
After the usual recovery of the <tt>dof_distribution</tt>, we declare an
<tt>std::map</tt> to collect the index-value pairs for the boundary DOFs. We 
set up a loop on the \f$2dim\f$ faces in order to gather the boundary indeces face
by face (with the get_boundary_dofs methd). Once the indeces (and their associated
values 0.0) are collected from each face, we call <tt>apply_boundary_values</tt>
to impose the boundary condition.

\note
In igatools the following convention on face numbering is adopted: in a 
\f$d\f$-dimensional grid with axes \f$\xi_0,...\xi_{d-1}\f$, then we have
<center>
<table>
  <tr>
    <td>0</td>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td>...</td>
    <td>2i</td>
    <td>2i+1</td>
  </tr>
  <tr>
    <td>\f$\{\xi_0=0\}\f$</td>
    <td>\f$\{\xi_0=1\}\f$</td>
    <td>\f$\{\xi_1=0\}\f$</td>
    <td>\f$\{\xi_1=1\}\f$</td>
    <td>\f$\{\xi_2=0\}\f$</td>
    <td>\f$\{\xi_2=1\}\f$</td>
    <td>...</td>
    <td>\f$\{\xi_i=0\}\f$</td>
    <td>\f$\{\xi_i=1\}\f$</td>
  </tr>
</table>
</center>
Faces in physical domain are the push-forward of the grid faces and hence ordered
in a similar fashion.

The last part of the Description is about the solving, saving the results 
in a <tt>*.vtu</tt> being 
already explained in \ref example_02:
\snippet example_04.cpp solve
We only remark again that Matrix and Vector objects can be used directly in more
sophisticated Trilinos code as they are derived classes of Epetra objects.
We leave to the reader the pleausure of having a glance of the remaining code.

\section fcode04 The full program
\include example_04_no_tag.cpp

*/
