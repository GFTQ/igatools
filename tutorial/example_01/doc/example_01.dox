/**

\page example_01 Example 1: creating a B-spline basis

\section Introduction
In this very first example we construct a cartesian grid of knots, a spline space
over the grid and finally an instance of the class representing the B-spline basis functions.

We briefly recall from the \ref tutorial page the command for compiling and
running the examples:
\code{.bash}
cd tutorial/example_01
make run-example_01
\endcode

If igatools is installed correctely, you should see the following lines as first
lines of the printed output:
\code{.bash}
Grid: 
  number of elements:  
    4 = [ 2 2 ]
  knots:  
    0.00000 0.500000 1.00000
    0.00000 0.500000 1.00000

Spline Space:
\endcode

\section code01 Description of the program

First we need to include header files. For this simple program, only two are needed:
\snippet example_01.cpp includes
The first header contains the declaration of the BSpline class. The second one contains
the declaration of a class for, among other features, streaming data to file or to the console.
There exists a header for the Grid class altough it is not necessary: the Grid
class is required for almost every igatools high-level object.

In order to save some typing, we use two handy namespaces:
\snippet example_01.cpp using

As first instruction, we define an integer constant that represents the dimensionality of 
our problem (2 in this case):
\snippet example_01.cpp dim
As a fundamental concept in igatools, almost every object is
a template on the dimension.

Then we create a uniform bidimensional cartesian grid with 3 nodes (or knots)
in each direction.
\snippet example_01.cpp grid
We underline the use of the template parameter <tt>dim</tt> and notice the construction
philosophy: in igatools, C++ constructors exist but are deprecated in favor of
creators, static methods that return the desired object wrapped in a smart pointer
(igatools makes an extensive use of smart pointers). We also notice that we don't want
to modify the grid, hence we call the static method <tt>const_create</tt> instead 
of the non-const version <tt>create</tt>.

In the next lines we see some examples of how to access the data inside an igatools
object:
\snippet example_01.cpp grid_print
We notice that the LogStream variable <tt>out</tt> is used as <tt>std::cout</tt> and
permits to stream the library's basic objects such as the TensorIndex.
In the following lines, we directly access to the grid knots by the variable
<tt>knots</tt>. As one can see from its declaration, KnotCoordinates is an alias for an
SafeSTLArray of SafeSTLVector (wrapped in a smart pointer). These two classes are
the analogous of <tt>std::array</tt> and <tt>std::vector</tt>, and provide bound
check if igatools is compiled in debug mode. The data therein is accessed via 
iterators.

With the Grid structure and the polynomial degrees in our hands we can create a SplineSpace:
\snippet example_01.cpp space
SplineSpace is a class that represents the mathematical object of both B-spline and
%NURBS based discrete spaces. In other words, 
SplineSpace is a spline space. The SplineSpace is then used to create the BSpline object:
\snippet example_01.cpp basis
We finally notice how the data inside a BSpline variable is printed to screen.
Every igatools object has the method <tt>print_info</tt>. It has to be used in
combination with a LogStream variable as the last lines of this example show.


\section exc01 Exercises
<ol>
<li> Modify the code to obtain a cartesian grid of different dimension with 
different number of knots, and spline spaces with different degrees. Verify that 
you obtain the expected output.
<div class="row">
 <a href="#hide11" class="hide" id="hide11">Show hint</a>
 <a href="#show11" class="show" id="show11">Hide hint</a>
 <div class="list">
\code{.cpp}
const int dim = 3;
const int n_knots = 5;
\endcode
 </div>
 </div>
<li> How would you modify the code so that the grid has 3 knots in the \f$u\f$ direction 
and 5 in the \f$v\f$?
<div class="row">
 <a href="#hide12" class="hide" id="hide12">Show hint</a>
 <a href="#show12" class="show" id="show12">Hide hint</a>
 <div class="list">
\code{.cpp}
auto grid = Grid<dim>::const_create({3,5});
\endcode
 </div>
 </div>
<li> How would you create a grid with non uniform knots?
 <div class="row">
  <a href="#hide13" class="hide" id="hide13">Show hint</a>
  <a href="#show13" class="show" id="show13">Hide hint</a>
  <div class="list">
\code{.cpp}
auto grid = Grid<2>::const_create(CartesianProductArray<Real,2>({{0,0.2,0.8,2},{0,0.25,1}}));
\endcode
 </div>
 </div>
</ol>
\section fullcode01 The full program

\include example_01_no_tag.cpp
  
*/
