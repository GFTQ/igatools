/**

\page example_05 Example 5: non-homogeneous Dirichlet conditions

\section Introduction

In this Example we consider a Poisson problem on the quarter annulus domain with a non-constant 
source term and non-homogeneous boundary conditions:
\f{equation}{
  \left\{
    \begin{aligned}
      -\Delta u &= f \textrm{   in }\Omega\\
      u &= g \textrm{   on }\partial\Omega\\
    \end{aligned}
  \right.
\f}
We provide an exact strong solution so that the \f$L^2\f$-norm error can be computed. The exact solution is:
\f{equation}{
  u(x,y) = \frac{1}{10}\sin\left(2\pi\left(x^2+y^2\right)\right)+\sqrt{x^2+y^2},
\f}
From \f$u\f$ the source term can be computed:
\f{equation}{
  \begin{aligned}
    f(x,y) = &-\frac{4}{5}\pi\cos\left(2\pi\left(x^2+y^2\right)\right)+\\
             &+\frac{8}{5}\pi^2\left(x^2+y^2\right)\sin\left(2\pi\left(x^2+y^2\right)\right)+\\
             &-\frac{1}{\sqrt{x^2+y^2}}.
  \end{aligned}
\f}
For the non-homogeneous boundary conidition, we split the boundary in the four edges \f$\Gamma_i\f$ and assign
boundary functions \f$g_i\f$ to each of them. The edges and boundary functions indexing (i.e. \f$i=0,...,3\f$) agrees with the face indexing
convention described in \ref example_04. We have:
\f{equation}{
  \begin{aligned}
    g_0:\Gamma_0\longrightarrow\mathbb{R},\quad g_0(x,y) &= 1,\\
    g_1:\Gamma_1\longrightarrow\mathbb{R},\quad g_1(x,y) &= 2,\\
    g_2:\Gamma_2\longrightarrow\mathbb{R},\quad g_2(x,y) &= \frac{1}{10}\sin\left(2\pi x^2\right)+x,\\
    g_3:\Gamma_3\longrightarrow\mathbb{R},\quad g_3(x,y) &= \frac{1}{10}\sin\left(2\pi y^2\right)+y.
  \end{aligned}
\f}

For the implementation of this problem, the main difficulties rely on the creation of
the boundary functions, while their actual application to the problem requires just three lines of code.
In order to create a custom Function for \f$g_2\f$ and \f$g_3\f$, we need to create a derived class
of FormulaFunction.

\section code05 Description of the program

Ahead of everything there are the new self-explanatory headers:
\snippet example_05.cpp include

We can proceed with the declaration of the derived class CustomFunction:
\snippet example_05.cpp custom_declaration
As one can notice, we may want to derive the class in the most general way for what concerns the template
parameters. We then declare some type aliases for practical reasons. Notice that we use the Point type
for the evaluation points and the Value type for the result. The only variable we need is a function pointer. In this variable
the user-provided function will be stored. The user-provided function is defined point-wise: it takes a Point
and gives back a Value.

We provide two constructor:
\snippet example_05.cpp custom_constructor
The first one is the default constructor and requires only the domain (it is a mandatory derivation of
the Function class), while the other takes also the function pointer as input parameter. Notice that
the constructors are private, as we will define and use the familiar <tt>const_create()</tt> methods.

The actual method that perfmorms the element-wise computation is <tt>evaluate_0</tt>:
\snippet example_05.cpp custom_evaluator
It just implements a point-loop where each evaluation is a call of the user-provided function stored in
<tt>funct_D0</tt>.

The class FormulaFunction is abstract and needs two other derived methods for derivatives,
in this example lazily implemented as not used at all:
\snippet example_05.cpp custom_not_implemented

At last, the public methods: the promised <tt>const_create</tt> and the mandatory <tt>print_info</tt> that
prints some useful informations. We inspect here only the <tt>const_create</tt>, so that the reader
can notice the usage of the SharedPtrConstnessHandler class, for which we refer to the documentation. Here
is the creator:
\snippet example_05.cpp custom_public

We now have a class for the implementation of custom functions. We will use the <tt>quarter_annulus</tt> function for
the construction of the reference domain (see previous examples). The class PoissonProblem is devoted to
the creation of spline spaces, the system assemble, solving, computing the \f$L^2\f$-error and saving the results.
It is a templated class on the problem dimension, as there is no need of implementing it for a specific dimension.
Here is the declaration along with the class variables:
\snippet example_05.cpp poisson_declaration
The reader is supposed to be familiar with most of the variables. The two new entries are a quadrature rule <tt>face_quad</tt> for
the integration on the boundary (notice the template parameter) and the container <tt>dirichlet_cond</tt>. We will explain
the creation and usage of the container later.

The constructor is self-explanatory:
\snippet example_05.cpp poisson_constructor
as much as the public methods:
\snippet example_05.cpp poisson_methods

The system assemble is almost the same of \ref example_04. We show it again so that that the user can meet two
useful methods of the BasisElement class, <tt>integrate_gradu_gradv</tt> and <tt>integrate_u_func</tt>:
\snippet example_05.cpp poisson_assemble

One of the variables of the class is the <tt>std::map</tt> container <tt>dirichlet_cond</tt>, which stores Functions
and the face id as keymap. Here is its final usage in three lines of code as promised:
\snippet example_05.cpp poisson_dirichlet
The container is passed directly to <tt>project_boundary_values</tt> (along with the
basis we are using and the another container <tt>dirichlet_vals</tt> for the results). This function
implements the \f$L^2\f$-projection of the boundary functions on the restriction to the edge of the basis functions.
Notice the input parameter <tt>face_quad</tt>.
Lastly, <tt>apply_boundary_values</tt> applies the boundary values.

We leave the three remaining methods <tt>solve</tt>, <tt>save</tt> and <tt>error</tt> to the reader, as there are no
new concepts to explain.

Before the inspection of the <tt>main</tt> body, we list the functions we are going to use. 
First of all, the exact solution:
\snippet example_05.cpp functions_u
the source term:
\snippet example_05.cpp functions_f
and the two boundary functions of interest, the other two being constant functions:
\snippet example_05.cpp functions_g2
\snippet example_05.cpp functions_g3
We just notice that the type Value needs the template parameters <tt>dim,range,rank</tt>. For the exact solution
and the source term we set them as <2,1,1>, while for the boundary function the dimension dim is only 1, thus
we set them as <1,1,1>.

We are ready for the main body. In the first lines we create the domain, the source term and the exact solution:
\snippet example_05.cpp main
The derivation of the class FormulaFunction might have been painfull but once it is done, its usage proceeds
straightforwardly.

At last, we can inspect the core part of the example: assigning the Dirichlet boundary conditions. First of all,
we need the following preliminar four lines of code:
\snippet example_05.cpp main_pre_dirichlet
Apart from the usual fetch of the <tt>grid</tt>, we notice the alias for SubGridElemMap. For now it is just a 
technical variable. Then we create an <tt>std::map</tt> container for the boundary functions, the first two of which
are constant. Without loss of generality, we only inspect the construction of the third:
\snippet example_05.cpp main_dirichlet_cond
In the first line we extract the subgrid associated to the prescribed face. The method <tt>get_sub_grid</tt> must 
be called with explicit template parameters as it allows to extract subgrids of any dimension (for example, faces or edges
for 3D problems). For each grid there is a domain, hence we use <tt>sub_grid_2</tt> to extract the corresponding subdomain
into the variable <tt>sub_domain_2</tt>. For each domain there is a function, hence we construct the third boundary
function using the subdomain and the user-provided function. Notice that the subdomain is interpreted as a manifold of
dimension 1 embedded in \f$\mathbb{R}^2\f$, thus the template parameter <tt><1,1,1></tt>. With the last line we cast
the variable type to the generic Function and insert the shared pointer to the container.

The inspection of the last lines are up to the reader.

\section fullcode05 The full program
\include example_05_no_tag.cpp


*/
